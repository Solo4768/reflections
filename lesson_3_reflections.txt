1.) When would you want to use a remote repository rather than keeping all your work local?

A remote repository may be preferred when working with other people on a project. The remote repository would be the 'master' source for the code and the various programmers could push or pull commits from that as themselves or the other programmers add features to the program. 

2.) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If you are collaborating on a project other programmers may have pushed updates to the GitHub project repository. Depending on the stage you are at with your own feature/commit that you are working on, you may not be ready to introduce whatever changes have been pushed to GitHub with your local Git repository.

3.) Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forking is similar to cloning but it only takes place remotely on GitHub. This is useful to avoid cloning remote repositories from another's GitHub account to your machine and then pushing them to your own GitHub account. Cloning can be done from GitHub to a local repository or between two local repositories. Branches split off from the master and allow users to commit changes to a separate parent commit and not affect the master branch when trying new features.  

4.) What is the benefit of having a copy of the last known state of the remote stored locally?

Having the last known state of the remote stored locally allows you to compare the state of your local repository with anything that collaborators may have pushed to the remote repository. This is useful if you are going to be offline for awhile and not have access to the remote repository.

5.) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

You could collaborate without using Git or GitHub by saving multiple version of files when trying out new features or lines of code. You could "share" these files using e-mail or DropBox. This may save time upfront learning to use Git and GitHub, it also may save time because you won't have to think about when to commit or when to merge or push and pull to a remote repository. However, this would be more difficult because for each different save, without using Git, you may have to save multiple files or you may forget to save and "break" your code by introducing a bug. Without Git or GitHub you will have to fix your mistake without the use of git diff to compare to previous versions of your code. 

6.) When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When collaborating on a project it may be better to make changes to a separate branch because this allows others a chance to review your changes before they are merged with the remote master repository.
